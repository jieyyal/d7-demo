<?php
// $Id: blank_context.inc,v 1.1.2.1.2.2 2011/01/10 17:19:27 jameswilliams Exp $

/**
 * @file
 *
 * This is the task handler plugin to handle page blanking based on context.
 */

// Plugin definition
$plugin = array(
  // is a 'context' handler type, meaning it supports the API of the
  // context handlers provided by ctools context plugins.
  'handler type' => 'context',
  'visible' => TRUE, // may be added up front.

  // Administrative fields.
  'title' => t('Blank Page'),
  'admin summary' => 'page_manager_blank_blank_context_admin_summary',
  'admin title' => 'page_manager_blank_blank_context_title',
  'operations' => array(
    'settings' => array(
      'title' => t('Settings'),
      'description' => t('Change general settings about this variant.'),
      'form' => 'page_manager_blank_blank_context_edit_settings',
    ),
  ),

  // Callback to render the data.
  'render' => 'page_manager_blank_blank_context_render',

  'export' => 'page_manager_blank_blank_context_export',

  // Where to go when finished.
  'add finish' => 'settings',

  'required forms' => array(
    'settings' => t('Configure settings'),
  ),
  'edit forms' => array(
    'settings' => t('Settings'),
  ),
  'forms' => array(
    'settings' => array(
      'form id' => 'page_manager_blank_blank_context_edit_settings',
    ),
  ),
  'default conf' => array(
    'title' => t('Redirect'),
    'contexts' => array(),
    'relationships' => array(),
    'path' => '',
    'query' => '',
    'fragment' => '',
  ),
);

/**
 * Converts task handlers to a configuration array.
 */
function page_manager_blank_blank_context_get_blankion($handler) {
  return array(
    'path' => $handler->conf['path'],
    'query' => $handler->conf['query'],
    'fragment' => $handler->conf['fragment'],
  );
}

/**
 * Check selection rules and, if passed, render thblanke contexts.
 *
 * We must first check to ensure the node is of a type we're allowed
 * to render. If not, decline to render it by returning NULL.
 */
function page_manager_blank_blank_context_render($handler, $base_contexts, $args, $test = TRUE) {
  // Go through arguments and see if they match.
  ctools_include('context');
  ctools_include('context-task-handler');
  // Add my contexts
  $contexts = ctools_context_handler_get_handler_contexts($base_contexts, $handler);

  // Test.
  if ($test && !ctools_context_handler_select($handler, $contexts)) {
    return;
  }

  if (isset($handler->handler)) {
    ctools_context_handler_pre_render($handler, $contexts, $args);
  }

  $info = array(
    'content' => '',
  );

  return $info;
}

/**
 * Special handling for exporting a panel task handler.
 */
function page_manager_blank_blank_context_export(&$handler, $indent) {
  // Left to remove legacy code when exporting.
  // TODO: Take this out, and do it to any old displays in upgrade path instead.
  foreach (array('display', 'did') as $item) {
    if (isset($handler->conf[$item])) {
      unset($handler->conf[$item]);
    }
  }
}

/**
 * Set up a title for the panel based upon the selection rules.
 */
function page_manager_blank_blank_context_title($handler, $task, $subtask) {
  if (isset($handler->conf['title'])) {
    return check_plain($handler->conf['title']);
  }
  else {
    return t('Redirect');
  }
}

/**
 * Provide a nice little summary of what's in a panel.
 */
function page_manager_blank_blank_context_admin_summary($handler, $task, $subtask, $page, $show_title = TRUE) {
  $task_name = page_manager_make_task_name($task['name'], $subtask['name']);
  $output = '';

  ctools_include('context');
  ctools_include('context-task-handler');

  // Get the operations
  $operations = page_manager_get_operations($page);

  // Get operations for just this handler.
  $operations = $operations['handlers']['children'][$handler->name]['children']['actions']['children'];
  $args = array('handlers', $handler->name, 'actions');
  $rendered_operations = page_manager_render_operations($page, $operations, array(), array('class' => 'actions'), 'actions', $args);

  $plugin = page_manager_get_task_handler($handler->handler);

  $object = ctools_context_handler_get_task_object($task, $subtask, $handler);
  $context = ctools_context_load_contexts($object, TRUE);

  $access = ctools_access_group_summary(!empty($handler->conf['access']) ? $handler->conf['access'] : array(), $context);
  if ($access) {
    $access = t('This panel will be selected if @conditions.', array('@conditions' => $access));
  }
  else {
    $access = t('This panel will always be selected.');
  }

  $rows = array();

  $type = $handler->type == t('Default') ? t('In code') : $handler->type;
  $rows[] = array(
    array('class' => t('page-summary-label'), 'data' => t('Storage')),
    array('class' => t('page-summary-data'), 'data' => $type),
    array('class' => t('page-summary-operation'), 'data' => ''),
  );

  if (!empty($handler->disabled)) {
    $link = l(t('Enable'), page_manager_edit_url($task_name, array('handlers', $handler->name, 'actions', 'enable')));
    $text = t('Disabled');
  }
  else {
    $link = l(t('Disable'), page_manager_edit_url($task_name, array('handlers', $handler->name, 'actions', 'disable')));
    $text = t('Enabled');
  }

  $rows[] = array(
    array('class' => t('page-summary-label'), 'data' => t('Status')),
    array('class' => t('page-summary-data'), 'data' => $text),
    array('class' => t('page-summary-operation'), 'data' => $link),
  );

  $link = l(t('Edit'), page_manager_edit_url($task_name, array('handlers', $handler->name, 'criteria')));
  $rows[] = array(
    array('class' => t('page-summary-label'), 'data' => t('Selection rule')),
    array('class' => t('page-summary-data'), 'data' => $access),
    array('class' => t('page-summary-operation'), 'data' => $link),
  );

  $link = l(t('Edit'), page_manager_edit_url($task_name, array('handlers', $handler->name, 'settings')));

  if (is_array($handler->conf)) {
    foreach ($handler->conf as $part => $value) {
      // Remove spaces - this will allow spaces to be used to delimit the context 'tokens' that need to be replaced!
      $handler->conf[$part] = str_replace(' ', '', $value);
    }
  }

  // Strip leading # from fragment if it's there.
  if (strpos($handler->conf['fragment'], '#') === 0) {
    $handler->conf['fragment'] = substr($handler->conf['fragment'], 1);
  }

  $info = theme('table', array('rows' => $rows, 'attributes' => array('class' => 'page-manager-handler-summary')));

  $title = $handler->conf['title'];
  if ($title != t('Blank Page')) {
    $title = t('Blank Page: @title', array('@title' => $title));
  }

  $output .= '<div class="clear-block">';
  if ($show_title) {
    $output .= '<div class="handler-title clear-block">';
    $output .= '<div class="actions handler-actions">' . $rendered_operations['actions'] . '</div>';
    $output .= '<span class="title-label">' . $title . '</span>';
  }

  $output .= '</div>';
  $output .= $info;
  $output .= '</div>';

  return $output;
}

/**
 * General settings for the panel
 */
function page_manager_blank_blank_context_edit_settings($form, &$form_state) {
  $conf = $form_state['handler']->conf;
  $form['conf']['title'] = array(
    '#type' => 'textfield',
    '#default_value' => $conf['title'],
    '#title' => t('Administrative title'),
    '#description' => t('Administrative title of this variant.'),
  );

  return $form;
}

/**
 * Submit handler for general settings form.
 */
function page_manager_blank_blank_context_edit_settings_submit(&$form, &$form_state) {
  $form_state['handler']->conf['title'] = $form_state['values']['title'];
}
